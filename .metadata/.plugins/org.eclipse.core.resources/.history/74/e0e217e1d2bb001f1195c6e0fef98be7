package com.synopsis.capacitacion.product.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.synopsis.capacitacion.product.entities.Product;
import com.synopsis.capacitacion.product.service.ProductServiceImpl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/product")
public class ProductController {

	@Autowired
	private ProductServiceImpl service;
	
	
	@GetMapping("/lista")
	public List<Product> listar(){
		return service.getAll();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Product> getProductId(@PathVariable Long id) {
		try {
			Product producto = service.getById(id);
			return new ResponseEntity<Product>(producto,HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<Product>(HttpStatus.NOT_FOUND);
		}
	}
	@PostMapping("/productos")
	public void guardarEmpleado(@RequestBody Product producto) {
		service.createProduct(producto);
	}

	@PutMapping("/productos/{id}")
	public ResponseEntity<Product> actualizarProducto(@PathVariable Integer id, @RequestBody Product producto) {
		try {
			Product productoExistente=service.getById(id);
			productoExistente.setCode(producto.getCode());	
			productoExistente.setName(producto.getName());		
			service.updatedProduct(productoExistente);
			return new ResponseEntity<Product>(productoExistente,HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<Product>(HttpStatus.NOT_FOUND);
		}
	}
	
	@DeleteMapping("/{id}")
	public void borrarUsuario(@PathVariable Long id) {		
		service.deleteProduct(id);		
	}
}
